service: metakeep-transaction-telemetry

provider:
  name: aws
  profile: serverless-admin
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    NODE_ENV: ${sls:stage}
  iam:
    role:
      name: ${self:service}-${sls:stage}-lambda-role
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource: "arn:aws:dynamodb:${aws:region}:503711231251:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${aws:region}:503711231251:log-group:/aws/lambda/*"
        - Effect: Allow
          Action:
            - lambda:CreateFunction
            - lambda:UpdateFunctionCode
            - lambda:UpdateFunctionConfiguration
            - lambda:DeleteFunction
            - lambda:GetFunction
            - lambda:InvokeFunction
            - lambda:AddPermission
            - lambda:RemovePermission
            - lambda:ListFunctions
          Resource: "*"
        - Effect: Allow
          Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:ValidateTemplate
            - cloudformation:List*
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:CreateBucket
            - s3:DeleteBucket
            - s3:ListBucket
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - "arn:aws:s3:::${self:service}-*"
            - "arn:aws:s3:::${self:service}-*/*"
        - Effect: Allow
          Action:
            - iam:GetRole
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:DeleteRolePolicy
            - iam:DeleteRole
            - iam:PassRole
            - iam:AttachRolePolicy
          Resource: "*"
        - Effect: Allow
          Action:
            - apigateway:*
          Resource: "*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline

package:
  individually: true
  patterns:
    - '!.git/**'
    - '!node_modules/**'
    - '!test/**'
    - 'src/**'

functions:
  recordPageView:
    handler: src/handlers/recordPageView.handler
    events:
      - http:
          path: telemetry/pageview
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
    environment:
      CORS_ORIGIN: '*'
    memorySize: 256
    timeout: 10

  getPageViews:
    handler: src/handlers/getPageViews.handler
    events:
      - http:
          path: telemetry/pageviews
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
    environment:
      CORS_ORIGIN: '*'
    memorySize: 256
    timeout: 10

resources:
  Conditions:
    ShouldCreateTable:
      Fn::Equals:
        - ${sls:stage}
        - dev
  Resources:
    PageViewsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: timestamp
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags:
          - Key: Environment
            Value: ${sls:stage}
          - Key: Service
            Value: ${self:service}
      Condition: ShouldCreateTable

    ApiGatewayLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        RetentionInDays: 7

  Outputs:
    ApiEndpoint:
      Description: "API Gateway endpoint URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${sls:stage}"